= Ruby Profiling tools
[2025-03-19 12:07] 
<<< profiling
<<< ruby
https://evilmartians.com/chronicles/test-prof-3-guided-and-automated-ruby-test-profiling
* General profiling
- Stackprof, Vernier, sampling
- sampling : collects stack traces over time while ur program is running
  - sample : uses a random subset of tests
    how to: go to `spec_helper.rb` and do `require "test_prof/recipes/rspec/sample"`
* Focused profiling
- TagProf, EventProf
  similar tests has similar problems
  Focus on most time consuming test types, not individual outliers
* Factories overhead elimination
** TODO fix the font lock issue
DEADLINE: <2025-03-20 Thu>
- `let_it_be` wtf?? -> this is because of font lock mode
** Play by play
use dip (gem install dip) to manage docker
*** do `dip  runner`
* TODO Do a patch for profiler gems and add a revert patch that you can apply easily
SCHEDULED: <2026-03-20 Fri>

* Test Prof is configured using env variables
- seeding it will give you the same subset of tests
- how to see the seed? run it once first and you should see the seed id on the logs
- SAMPLE=100 <rspec cmd> --seed <seedid>

* Dont need to run coverage for every test run (15-20% overhead)
- simply don't require simplecov


* to run Stackprof set this env
TEST_STACK_PROF=1

charlock_holmes is a dependency that is failing, look at https://github.com/brianmario/charlock_holmes/issues/190

best way to analyse profile is json inputted into >
https://www.speedscope.app/
- left-heavy tab of speedscope aggregates common stacks and shows you some patterns in your code
- most useful for low-hanging optimizations is the sandwich view, things taking a lot of time are on the top
- whereby low-hanging optimizations requires jsut a line / few words to fix
- as you look through note down the list of suspicious things

* to run Vernier is just env of `TEST_VERNIER=1`
https://vernier.prof/ <- upload the results
web version (above) supports looking at the src code of ruby gem whereas local doesn't
use one or the other, vernier seems baked with more things, im slightly preferring it
- can right click on a stack and select focus on subtree only to deep dive into a particular stack

- in the video as you focus on the webpacker stack you discover that the cache is not loaded, this is a simple configuration within webpacker.yml, 'cache_manifest: true'

- looking at the 'Marker Chart' you are able to tell when a thread is running and what it is blocked by
- realise from this that the debugger is blocking the thread constantly where it keeps checking, the way to solve this is to disable the debugger (debug), require: false in your gemfile
- what you should do instead is to require debug when u need it, or run rspec with -rdebug flag
  
for the webpacker fix, it is also glaring that it is only relevant for view related specs, but it wind up affecting the requests as well, causing a even more dramatic difference  

"Invert call stack" in the context of profiling tools refers to a feature that allows you to view the call stack in a reversed manner. Typically, a call stack displays the sequence of function calls leading up to a certain point in the code, starting from the initial function down to the currently executing function.

When you invert the call stack, it shows the functions that were called, starting from the most recently executed function and tracing back to the original caller

** to create a separate json file make use of a env flag that sets a suffix
example: TEST_PROF_REPORT=<some-random-suffix-that-identifies-json>
there is also a config to add timestamps by default -> requires writing some code in the configuration

* EventProf
setting up instantiation for a particular method
write the following snippet within rails_helper

#+begin_src ruby
TestProf::EventProf.monitor(PaperClip::Attachment, :"paper_clip.post_process", :post_process) # note the method is found by looking at stacktraces
#+end_src

TestProf::EventProf.monitor(<Class>, <custom-name-for-event>, <:mtd-name>)

running on the terminal according to the custom-name
#+begin_src shell
EVENT_PROF=paper_clip.post_process be rspec spec/models/
#+end_src

can refer to below TagProf, the event you set to EVENT_PROF is the same i.e. sidekiq.inline or paper_clip.post_process etc

some extras on '55.28' to conditionally use Sidekiq fake or inline due to the test setup  by configuring some stuff on `rails_helper`

* TagProf
:PROPERTIES:
:ID:       65C9D20B-FE4D-45B2-A3AB-7C8B78A6F19B
:END:

#+DOWNLOADED: screenshot @ 2025-03-19 16:10:35
[[file:TagProf/2025-03-19_16-10-35_screenshot.png]]
typically post_process is a custom added process
able to see what is the most time consuming group according to a list 'request|model|controller|etc...'

* Misc
:PROPERTIES:
:ID:       012D7D74-074C-42D2-B2B1-AB53DA5B134F
:END:
i didn't know you could set these metadata on a it block like this

#+DOWNLOADED: screenshot @ 2025-03-19 16:37:46
[[file:Misc/2025-03-19_16-37-46_screenshot.png]]
before and after is 'it' and  'do' respectively

then inside rails_helper can look at it and toggle Sidekiq::Testing

#+DOWNLOADED: screenshot @ 2025-03-19 16:38:46
[[file:Misc/2025-03-19_16-38-46_screenshot.png]]

** you could change from 'it' to 'fit' to focus on a specific test(s)


** you want to add these two lines within Rspec.configure under spec_helper.rb
:PROPERTIES:
:ID:       56F18584-40B4-4D93-A574-C9CE05EEECAA
:END:

#+DOWNLOADED: screenshot @ 2025-03-19 16:40:51
[[file:Misc/2025-03-19_16-40-51_screenshot.png]]

These configuration options control how tests (specs) are executed:

config.run_all_when_everything_filtered = true - This setting tells the test runner to run all tests if no specific filter is applied or if all tests are filtered out. This ensures that even if you attempt to run only specific tests but your filter doesn't match any tests, the entire test suite will still run instead of running nothing.
config.filter_run_when_matching :focus - This setting allows you to tag certain tests with :focus and then only those tagged tests will run. This is extremely useful during development when you want to focus on a specific set of tests without running the entire test suite.

Together, these settings provide a convenient workflow where you can:

Tag specific tests with :focus to run only those tests during development
Remove all :focus tags to run the entire test suite (thanks to the first setting)
